name: Cleanup

on:
  schedule:
    # Run cleanup every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - docker
        - artifacts
        - cache

jobs:
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'artifacts' || github.event_name == 'schedule'
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Get all artifacts
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: owner,
            repo: repo,
            per_page: 100
          });
          
          // Delete artifacts older than 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < thirtyDaysAgo) {
              console.log(`Deleting artifact: ${artifact.name} (${artifact.id})`);
              await github.rest.actions.deleteArtifact({
                owner: owner,
                repo: repo,
                artifact_id: artifact.id
              });
            }
          }

  cleanup-docker:
    name: Cleanup Old Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'docker' || github.event_name == 'schedule'
    
    steps:
    - name: Delete old Docker images
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Get package versions
          try {
            const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: repo,
              org: owner
            });
            
            // Keep only the latest 10 versions and delete older ones
            const versionsToDelete = versions.data.slice(10);
            
            for (const version of versionsToDelete) {
              console.log(`Deleting Docker image version: ${version.id}`);
              await github.rest.packages.deletePackageVersionForOrg({
                package_type: 'container',
                package_name: repo,
                org: owner,
                package_version_id: version.id
              });
            }
          } catch (error) {
            console.log('Error cleaning up Docker images:', error.message);
            // Try user-owned packages if org-owned fails
            try {
              const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                package_type: 'container',
                package_name: repo,
                username: owner
              });
              
              const versionsToDelete = versions.data.slice(10);
              
              for (const version of versionsToDelete) {
                console.log(`Deleting Docker image version: ${version.id}`);
                await github.rest.packages.deletePackageVersionForUser({
                  package_type: 'container',
                  package_name: repo,
                  username: owner,
                  package_version_id: version.id
                });
              }
            } catch (userError) {
              console.log('Error cleaning up user Docker images:', userError.message);
            }
          }

  cleanup-cache:
    name: Cleanup GitHub Actions Cache
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'cache' || github.event_name == 'schedule'
    
    steps:
    - name: Cleanup cache
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Get all caches
          const caches = await github.rest.actions.getActionsCacheList({
            owner: owner,
            repo: repo,
            per_page: 100
          });
          
          // Delete caches older than 7 days
          const sevenDaysAgo = new Date();
          sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
          
          for (const cache of caches.data.actions_caches) {
            const lastAccessedAt = new Date(cache.last_accessed_at);
            if (lastAccessedAt < sevenDaysAgo) {
              console.log(`Deleting cache: ${cache.key} (${cache.id})`);
              await github.rest.actions.deleteActionsCacheById({
                owner: owner,
                repo: repo,
                cache_id: cache.id
              });
            }
          }

  cleanup-summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-docker, cleanup-cache]
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "# Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        echo "- Artifacts cleanup: ${{ needs.cleanup-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker cleanup: ${{ needs.cleanup-docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Cache cleanup: ${{ needs.cleanup-cache.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Cleanup completed successfully! ðŸ§¹" >> $GITHUB_STEP_SUMMARY
