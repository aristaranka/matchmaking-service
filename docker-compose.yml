services:
  # Redis service for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: matchmaking-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - matchmaking-network

  # Spring Boot application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matchmaking-app
    ports:
      - "8080:8080"
    environment:
      # Override Redis connection to use container name
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      
      # Database configuration (using H2 in-memory for demo)
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:matchdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=
      
      # JWT Configuration (should be changed in production)
      - SECURITY_JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-32-bytes-min
      - SECURITY_JWT_TTL_SECONDS=86400
      
      # Application configuration
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      
      # Logging
      - LOGGING_LEVEL_ORG_GAMES_MATCHMAKINGSERVICE=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
      
      # JVM Options for container
      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - matchmaking-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: matchmaking-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - matchmaking-network
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  matchmaking-network:
    driver: bridge
