# Docker-specific configuration

# Redis configuration for Docker environment
spring.data.redis.host=redis
spring.data.redis.port=6379
spring.data.redis.timeout=2000ms
spring.data.redis.jedis.pool.max-active=8
spring.data.redis.jedis.pool.max-idle=8
spring.data.redis.jedis.pool.min-idle=0

# Database configuration (H2 for demo, can be changed to PostgreSQL/MySQL)
spring.datasource.url=jdbc:h2:mem:matchdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Server configuration
server.port=8080
server.servlet.context-path=/

# Actuator endpoints for container health checks
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=always
management.health.redis.enabled=true

# Logging configuration for containers
logging.level.org.games.matchmakingservice=INFO
logging.level.org.springframework.security=WARN
logging.level.root=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# WebSocket configuration
app.ws.endpoint=/ws-match
app.ws.allowed-origins=*

# CORS configuration for development
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
